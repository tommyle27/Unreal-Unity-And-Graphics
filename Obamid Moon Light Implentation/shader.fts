#version 330 core
out vec4 FragColour;

struct Material {
	sampler2D triangleTexture;
	sampler2D floorTexture;

	float shininess;
};

struct MoonLight {
	vec3 direction;
	
	vec3 ambient;
};

struct SpotLight {
	vec3 direction;
	vec3 position;

	float cutOff;
	float outerCutOff;

	float linear;
	float constant;
	float quadtratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

uniform MoonLight moon;
uniform SpotLight obamaLight;

uniform Material material;
uniform vec3 viewPos;

//uniform sampler2D triangleTexture;

// declare functions first
vec3 calcMoonLight(MoonLight light, vec3 normal, vec3 viewDir);

void main() {
	// set up basic properties for lighting (norm for specular, viewDir for proper light effects towards viewer)
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);

	// moon lighting
	vec3 result = calcMoonLight(moon, norm, viewDir);

	// spot lighting

	FragColour = vec4(result, 1.0);
	//FragColour = texture(material.triangleTexture, TexCoord);
}

vec3 calcMoonLight(MoonLight light, vec3 normal, vec3 viewDir) {
	vec3 lightDir = normalize(-light.direction);

	vec3 ambient = light.ambient * vec3(texture(material.triangleTexture, TexCoord));
	ambient = light.ambient * vec3(texture(material.floorTexture, TexCoord));


	return ambient;
}