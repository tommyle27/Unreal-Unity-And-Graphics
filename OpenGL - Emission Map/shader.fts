#version 330 core

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  sampler2D emission;
  float shininess;
};

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform float time;

void main()
{
    // ambient
    vec3 ambient =  light.ambient * texture(material.diffuse, TexCoords).rgb;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse =  light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;

    // specular lighting
    vec3 viewDirection = normalize(viewPos - FragPos);
    vec3 reflectDirection = reflect(-lightDir, norm);

    // calcluate specular component
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);
    vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;
        
    //emission 
    vec3 emission = vec3(0.0);
    // check for black box inside specular
    if (texture(material.specular, TexCoords).r == 0) { 
        emission = texture(material.emission, TexCoords).rgb;

        // move the emission texture over time
        emission = texture(material.emission, TexCoords + vec2(0.0, time)).rgb;
    }

    vec3 result = (ambient + diffuse + specular + emission);
    FragColor = vec4(result, 1.0);
} 