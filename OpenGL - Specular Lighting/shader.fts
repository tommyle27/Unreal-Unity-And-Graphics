#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec3 LightPos; // extra input variable since we need the light pos. in view space we calc this in the vertex shader
  
uniform vec3 lightColour;
uniform vec3 cubeColour;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColour;
  	
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColour;

    // specular lighting
    float specularStrength = 0.5;
    vec3 viewDirection = normalize(-FragPos); // the viewer is always at (0,0,0) in view-space, so viewDirection is (0,0,0) - Position => -Position
    vec3 reflectDirection = reflect(-lightDir, norm);

    // calcluate specular component
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), 16);
    vec3 specular = specularStrength * spec * lightColour;
            
    vec3 result = (ambient + diffuse + specular) * cubeColour;
    FragColor = vec4(result, 1.0);
} 