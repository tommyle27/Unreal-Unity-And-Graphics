#version 330 core

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  sampler2D emission;
  float shininess;
};

struct Light {
    vec3 position;

    vec3 direction;

    // for spotlight
    float cutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    
    // set up structure for attenuation
    float constant;
    float linear;
    float quadratic;
};

out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform float time;

void main()
{
    vec3 lightDir = normalize(light.position - FragPos);

    // spot light
    float theta = dot(lightDir, normalize(-light.direction));

    if (theta > light.cutOff) {
        // perform light calculations

        // ambient
        vec3 ambient =  light.ambient * texture(material.diffuse, TexCoords).rgb;
  	
        // diffuse 
        vec3 norm = normalize(Normal);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse =  light.diffuse * diff * texture(material.diffuse, TexCoords).rgb;

        // specular lighting
        vec3 viewDirection = normalize(viewPos - FragPos);
        vec3 reflectDirection = reflect(-lightDir, norm);

        // calcluate specular component
        float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), material.shininess);
        vec3 specular = light.specular * spec * texture(material.specular, TexCoords).rgb;
        
        //emission 
        vec3 emission = vec3(0.0);
        // check for black box inside specular
        if (texture(material.specular, TexCoords).r == 0) { 
            emission = texture(material.emission, TexCoords).rgb;

            // move the emission texture over time
            emission = texture(material.emission, TexCoords + vec2(0.0, time)).rgb;
        }


        // attenuation
        float distance = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));


        // removed ambient and emission from attenuation to fix issue of objects being darker inside the cone of light than outside at larger distances
        //ambient *= attenuation;
        diffuse *= attenuation;
        specular *= attenuation;
        //emission *= attenuation;

        vec3 result = (ambient + diffuse + specular + emission);
        FragColor = vec4(result, 1.0);


    } else {
        // set ambient lighting to the rest of the scene

        //emission 
        vec3 emission = vec3(0.0);

        // check for black box inside specular
        if (texture(material.specular, TexCoords).r == 0) { 
            emission = texture(material.emission, TexCoords).rgb;

            // move the emission texture over time
            emission = texture(material.emission, TexCoords + vec2(0.0, time)).rgb;
        }

        
        FragColor = vec4((light.ambient + emission) * texture(material.diffuse, TexCoords).rgb, 1.0);
    }
} 